from pydantic import BaseModel, EmailStr, Field
from typing import List, Dict, Any, Optional

# Request bodies
class SignupRequest(BaseModel):
    username: str
    email: EmailStr
    password: str

class LoginRequest(BaseModel):
    username: str
    password: str

# Token response
class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"

class DocumentMetadata(BaseModel):
    """
    A flexible container for metadata associated with a document chunk.
    This structure is used internally and can be part of API responses.
    """
    source_file: Optional[str] = None
    source_type: Optional[str] = Field(None, description="The type of the source file, e.g., 'pdf', 'csv', 'txt'")
    page_count: Optional[int] = None
    row_count: Optional[int] = None
    column_headers: Optional[List[str]] = None
    # Add any other metadata fields that your ingestors might extract.
    chunk_number: Optional[int] = None


class DocumentUploadResponse(BaseModel):
    """
    The response sent back to the client after a successful file upload and processing.
    """
    message: str = Field(..., description="A summary of the processing outcome.")
    filename: str = Field(..., description="The name of the file that was processed.")
    doc_id: str = Field(..., description="The unique document ID assigned to the processed file.")
    chunks_added: int = Field(..., description="The number of chunks the document was split into and added to the database.")


class DocumentInfo(BaseModel):
    """
    A summary of a single document present in the system, used for listing documents.
    """
    doc_id: str = Field(..., description="The unique document ID.")
    filename: Optional[str] = Field(None, description="The original filename of the document.")
    source_type: Optional[str] = Field(None, description="The type of the source file, e.g., 'pdf', 'csv'.")


class ListDocumentsResponse(BaseModel):
    """
    The response containing a list of all documents currently in the vector store.
    """
    total_documents: int = Field(..., description="The total number of unique documents in the system.")
    documents: List[DocumentInfo] = Field(..., description="A list containing summary information for each document.")


class QueryRequest(BaseModel):
    """
    The request model for a user's query. It includes the question and any
    parameters for the RAG process.
    """
    query_text: str = Field(..., min_length=1, description="The natural language query from the user.")
    n_results: int = Field(default=5, ge=1, le=50, description="The number of relevant document chunks to retrieve for context.")
    # In a stateful app, this would also include:
    # chat_id: Optional[str] = None


class QueryResponse(BaseModel):
    """
    The simplified response model for a user query. It returns the original
    query and a single, synthesized answer string.
    """
    original_query: str = Field(..., description="The original query text submitted by the user.")
    synthesized_answer: str = Field(..., description="The final, consolidated answer generated by the AI.")


class StatusResponse(BaseModel):
    """
    A generic response model for endpoints that return a simple status message,
    often used for administrative tasks.
    """
    status: str
    message: Optional[str] = None